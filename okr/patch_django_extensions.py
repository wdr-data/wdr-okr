def patch():
    from django.utils.encoding import force_str
    from django_extensions.management import modelviz
    from django.db import connection
    from django.db.models import ForeignKey

    class CustomModelGraph(modelviz.ModelGraph):
        def get_appmodel_context(self, appmodel, appmodel_abstracts):
            context = super().get_appmodel_context(appmodel, appmodel_abstracts)
            context["db_table_name"] = appmodel._meta.db_table
            context["unique_together"] = appmodel._meta.unique_together
            context["docstring"] = appmodel.__doc__

            context["is_m2m_table"] = False

            if appmodel._meta.auto_created:
                context["is_m2m_table"] = True

                m2m_targets = [
                    field.remote_field.model
                    for field in appmodel._meta.fields
                    if type(field) is ForeignKey
                ]
                context["m2m_targets"] = m2m_targets

                context[
                    "docstring"
                ] = "Automatisch erzeugte Tabelle f√ºr eine Many-to-Many-Relation."

            return context

        def add_attributes(self, field, abstract_fields):
            attrs = super().add_attributes(field, abstract_fields)
            attrs["column_name"] = force_str(field.column)

            if type(field) is ForeignKey and field.model._meta.auto_created:
                attrs["verbose_name"] = ""
                attrs["help_text"] = ""
            else:
                attrs["verbose_name"] = force_str(field.verbose_name)
                attrs["help_text"] = force_str(field.help_text)

            attrs["internal_type"] = force_str(field.get_internal_type())
            attrs["db_type"] = field.db_type(connection)
            attrs["null"] = field.null
            attrs["unique"] = field.unique
            return attrs

        def get_models(self, app):
            models = super().get_models(app)

            # Add autogenerated models from m2m relations
            for model in models:
                for field in model._meta.many_to_many:
                    models.append(field.remote_field.through)

            return models

        def get_relation_context(self, target_model, field, label, extras):
            relation = super().get_relation_context(target_model, field, label, extras)
            relation["column_name"] = force_str(field.column)
            relation["target_table_name"] = force_str(target_model._meta.db_table)
            return relation

    modelviz.ModelGraph = CustomModelGraph
