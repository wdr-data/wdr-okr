"""Forms for managing YouTube data."""

from datetime import date, timedelta

import re

from bulk_sync import bulk_sync
from django.db.models import Q
from django.contrib import admin
from django.contrib import messages
from django.core.files.uploadedfile import UploadedFile
from django.http.request import HttpRequest
import pandas as pd
from loguru import logger

from ..models import (
    YouTube,
    YouTubeAnalytics,
    YouTubeDemographics,
    YouTubeTrafficSource,
    YouTubeVideo,
    YouTubeVideoAnalytics,
    YouTubeVideoAnalyticsExtra,
    YouTubeVideoDemographics,
    YouTubeVideoTrafficSource,
    YouTubeVideoSearchTerm,
    YouTubeVideoExternalTraffic,
)
from .base import QuintlyAdmin
from .uploads import UploadFileMixin, UploadMultipleFilesForm


class YouTubeAnalyticsAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube analytics data to edit."""

    list_display = [
        "date",
        "youtube",
        "subscribers",
        "quintly_last_updated",
        "last_updated",
    ]
    list_display_links = ["date"]
    list_filter = ["youtube"]
    date_hierarchy = "date"


class YouTubeDemographicsAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube demographics data to edit."""

    list_display = [
        "date",
        "youtube",
        "age_range",
        "gender",
        "quintly_last_updated",
        "last_updated",
    ]
    list_display_links = ["date"]
    list_filter = ["youtube", "age_range", "gender"]
    date_hierarchy = "date"


class YouTubeTrafficSourceAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube traffic source data to edit."""

    list_display = [
        "date",
        "youtube",
        "source_type",
        "views",
        "watch_time",
        "quintly_last_updated",
        "last_updated",
    ]
    list_display_links = ["date"]
    list_filter = ["youtube", "source_type"]
    date_hierarchy = "date"


class YouTubeVideoAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube video base data to edit."""

    list_display = [
        "published_at",
        "title",
        "duration",
        "is_livestream",
        "external_id",
        "quintly_last_updated",
        "last_updated",
    ]
    list_display_links = ["published_at", "title"]
    list_filter = ["youtube", "is_livestream"]
    search_fields = ["title", "external_id"]
    date_hierarchy = "published_at"


class YouTubeVideoAnalyticsAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube video analytics data to edit."""

    list_display = [
        "date",
        "youtube_video",
        "views",
        "watch_time",
        "last_updated",
    ]
    list_display_links = ["date", "youtube_video"]
    list_filter = ["youtube_video__youtube", "live_or_on_demand"]
    search_fields = ["youtube_video__title", "youtube_video__external_id"]
    date_hierarchy = "date"


class YouTubeVideoAnalyticsExtraAdmin(UploadFileMixin, admin.ModelAdmin):
    """List for uploading and choosing existing additional YouTube video
    analytics data to edit."""

    upload_form_class = UploadMultipleFilesForm

    list_display = [
        "date",
        "youtube_video",
        "impressions",
        "clicks",
    ]
    list_display_links = ["date", "youtube_video"]
    list_filter = ["youtube_video__youtube"]
    search_fields = ["youtube_video__title", "youtube_video__external_id"]
    date_hierarchy = "date"

    def process_uploaded_file(self, request: HttpRequest, file: UploadedFile):
        """Implementation to handle uploaded files, required by the ``UploadFileMixin``.
        Parses files exported from the YouTube Analytics backend and creates the
        corresponding entries in the database.
        Some checks were added to provide hints to the user if the file has an unexpected
        structure.
        Results are saved in
        :class:`~okr.models.youtube.YouTubeVideoAnalyticsExtra`.
        Args:
            request (HttpRequest): The request generated by the upload form
            file (UploadedFile): The uploaded file
        """
        logger.info("Uploaded file: {}", file.name)
        df = pd.read_csv(self.open_zip(file)["Table data.csv"])
        logger.debug(df)

        df.fillna(0, inplace=True)

        filename = file.name
        name_pattern = r"Video (\d{4}-\d{2}-\d{2})_(\d{4}-\d{2}-\d{2}).*"
        parsed_name = re.match(name_pattern, filename)

        if not parsed_name:
            self.message_user(
                request,
                f'{filename} ist nicht der richtige Export (Dateiname beginnt nicht mit "Video")',
                level=messages.ERROR,
            )
            return

        start_date, end_date = parsed_name.groups()
        start_date = date.fromisoformat(start_date)
        end_date = date.fromisoformat(end_date)

        if end_date - start_date > timedelta(days=1, hours=2):
            self.message_user(
                request,
                f"{filename} scheint mehr als einen Tag zu umfassen",
                level=messages.ERROR,
            )
            return

        if "Video" not in df.columns:
            self.message_user(
                request,
                f"Die hochgeladene Datei {filename} enthält keine Video-Zahlen! "
                'Wähle den Tab "Video" in den YouTube Studio Analytics.',
                level=messages.ERROR,
            )
            return

        if "Impressions" not in df.columns:
            self.message_user(
                request,
                f"Die hochgeladene Datei {filename} enthält keine Impressions! "
                'Wähle den Tab "Video" in den YouTube Studio Analytics.',
                level=messages.ERROR,
            )
            return

        if "Impressions click-through rate (%)" not in df.columns:
            self.message_user(
                request,
                f"Die hochgeladene Datei {filename} enthält keine Click-Through-Rate! "
                'Wähle den Tab "Video" in den YouTube Studio Analytics.',
                level=messages.ERROR,
            )
            return

        df = df[df["Video"] != "Total"]
        df["Clicks"] = (
            df["Impressions click-through rate (%)"] * df["Impressions"] / 100
        ).astype("int")

        youtube_videos = YouTubeVideo.objects.filter(
            external_id__in=df["Video"].unique().tolist()
        )

        new_models = []
        youtube_videos = {video.external_id: video for video in youtube_videos}

        for index, row in df.iterrows():
            if row["Video"] not in youtube_videos:
                logger.warning(
                    "Could not find YouTube video with external_id {}", row["Video"]
                )
                continue

            new_models.append(
                YouTubeVideoAnalyticsExtra(
                    youtube_video=youtube_videos[row["Video"]],
                    date=start_date,
                    impressions=row["Impressions"],
                    clicks=row["Clicks"],
                )
            )

        result = bulk_sync(
            new_models=new_models,
            filters=Q(date=start_date),
            key_fields=["youtube_video_id", "date"],
            skip_deletes=True,
        )

        logger.info(result)

        self.message_user(request, f"Datei {filename} erfolgreich eingelesen!")


class YouTubeVideoDemographicsAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube video demographics data to edit."""

    list_display = [
        "youtube_video",
        "age_range",
        "gender",
        "views_percentage",
        "last_updated",
    ]
    list_display_links = ["youtube_video"]
    list_filter = ["youtube_video__youtube", "age_range", "gender"]
    search_fields = ["youtube_video__title", "youtube_video__external_id"]


class YouTubeVideoTrafficSourceAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube video traffic source data to edit."""

    list_display = [
        "youtube_video",
        "source_type",
        "views",
        "watch_time",
        "last_updated",
    ]
    list_display_links = ["youtube_video", "source_type"]
    search_fields = ["youtube_video__title", "youtube_video__external_id"]
    list_filter = ["source_type", "youtube_video__youtube"]


class YouTubeVideoSearchTermAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube video search term data to edit."""

    list_display = [
        "youtube_video",
        "search_term",
        "views",
        "watch_time",
        "last_updated",
    ]
    list_display_links = ["youtube_video"]
    search_fields = ["youtube_video__title", "youtube_video__external_id"]
    list_filter = ["youtube_video__youtube"]


class YouTubeVideoExternalTrafficAdmin(admin.ModelAdmin):
    """List for choosing existing YouTube video search term data to edit."""

    list_display = [
        "youtube_video",
        "name",
        "views",
        "watch_time",
        "last_updated",
    ]
    list_display_links = ["youtube_video"]
    search_fields = ["youtube_video__title", "youtube_video__external_id"]
    list_filter = ["youtube_video__youtube"]


admin.site.register(YouTube, QuintlyAdmin)
admin.site.register(YouTubeAnalytics, YouTubeAnalyticsAdmin)
admin.site.register(YouTubeDemographics, YouTubeDemographicsAdmin)
admin.site.register(YouTubeTrafficSource, YouTubeTrafficSourceAdmin)
admin.site.register(YouTubeVideo, YouTubeVideoAdmin)
admin.site.register(YouTubeVideoAnalytics, YouTubeVideoAnalyticsAdmin)
admin.site.register(YouTubeVideoAnalyticsExtra, YouTubeVideoAnalyticsExtraAdmin)
admin.site.register(YouTubeVideoDemographics, YouTubeVideoDemographicsAdmin)
admin.site.register(YouTubeVideoTrafficSource, YouTubeVideoTrafficSourceAdmin)
admin.site.register(YouTubeVideoSearchTerm, YouTubeVideoSearchTermAdmin)
admin.site.register(YouTubeVideoExternalTraffic, YouTubeVideoExternalTrafficAdmin)
